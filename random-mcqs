

var x=10
function printing(){
    console.log("x is " , x)
    
}
printing() //first execute this line
console.log("x from outer scope", x)  // second executes this

Hoisting

// Hoisting in js is a feature to access the variables before they intialised

printing()
console.log("x from outer scope", x)                                      
console.log(printing)
var x=10
function printing(){                                        //doesnot work with arrow functions ,expressions because they stored as vars in GEC.
    console.log("x is " , x)  
    console.log("hii shammu")
    }
output  
x is  undefined
hii shammu    //the function is executing means hoisted
x from outer scope undefined
[Function: printing]

//The scope of the variables

const x=20
a()
b()
console.log("x from local space is", x) // look for local var
function a(){
    var x=5
    console.log(x)
}  //gec vanished after execution


function b(){
    var x=10
    console.log(x)
} // gec is vanished after execution in call stack
output:
5
10
20















